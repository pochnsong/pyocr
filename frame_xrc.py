# This file was automatically generated by pywxrc.
# -*- coding: UTF-8 -*-

import wx
import wx.xrc as xrc

__res = None

def get_resources():
    """ This function provides access to the XML resources in this module."""
    global __res
    if __res == None:
        __init_resources()
    return __res




class xrcMain(wx.Frame):
#!XRCED:begin-block:xrcMain.PreCreate
    def PreCreate(self, pre):
        """ This function is called during the class's initialization.
        
        Override it for custom setup before the window is created usually to
        set additional window styles using SetWindowStyle() and SetExtraStyle().
        """
        pass
        
#!XRCED:end-block:xrcMain.PreCreate

    def __init__(self, parent):
        # Two stage creation (see http://wiki.wxpython.org/index.cgi/TwoStageCreation)
        pre = wx.PreFrame()
        self.PreCreate(pre)
        get_resources().LoadOnFrame(pre, parent, "Main")
        self.PostCreate(pre)

        # Define variables for the controls, bind event handlers



class xrcWordList(wx.Frame):
#!XRCED:begin-block:xrcWordList.PreCreate
    def PreCreate(self, pre):
        """ This function is called during the class's initialization.
        
        Override it for custom setup before the window is created usually to
        set additional window styles using SetWindowStyle() and SetExtraStyle().
        """
        pass
        
#!XRCED:end-block:xrcWordList.PreCreate

    def __init__(self, parent):
        # Two stage creation (see http://wiki.wxpython.org/index.cgi/TwoStageCreation)
        pre = wx.PreFrame()
        self.PreCreate(pre)
        get_resources().LoadOnFrame(pre, parent, "WordList")
        self.PostCreate(pre)

        # Define variables for the controls, bind event handlers



class xrcFeature(wx.Frame):
#!XRCED:begin-block:xrcFeature.PreCreate
    def PreCreate(self, pre):
        """ This function is called during the class's initialization.
        
        Override it for custom setup before the window is created usually to
        set additional window styles using SetWindowStyle() and SetExtraStyle().
        """
        pass
        
#!XRCED:end-block:xrcFeature.PreCreate

    def __init__(self, parent):
        # Two stage creation (see http://wiki.wxpython.org/index.cgi/TwoStageCreation)
        pre = wx.PreFrame()
        self.PreCreate(pre)
        get_resources().LoadOnFrame(pre, parent, "Feature")
        self.PostCreate(pre)

        # Define variables for the controls, bind event handlers





# ------------------------ Resource data ----------------------

def __init_resources():
    global __res
    __res = xrc.EmptyXmlResource()

    __res.Load('frame.xrc')

# ----------------------- Gettext strings ---------------------

def __gettext_strings():
    # This is a dummy function that lists all the strings that are used in
    # the XRC file in the _("a string") format to be recognized by GNU
    # gettext utilities (specificaly the xgettext utility) and the
    # mki18n.py script.  For more information see:
    # http://wiki.wxpython.org/index.cgi/Internationalization 
    
    def _(str): pass
    
    _("File")
    _("Load Image")
    _("Clear Image")
    _("Exit")
    _("Edit")
    _("Zoom In")
    _("Zoom Out")
    _("Debug")
    _("Undo")
    _("Gray Histogram Image")
    _("Distribution")
    _("OCR\n文字识别")
    _("Convert Image\n图像灰度化")
    _("Binary Image\n图像二值化")
    _("Border\n整体边界处的留白")
    _("Image Denoising\n图像去噪")
    _("Median Filter\n中值滤波")
    _("FCM Normal\nFCM 常规算法")
    _("FCM Fast\nFCM 快速算法")
    _("FCM Block")
    _("K-Means")
    _("K-Means Fast")
    _("OCR")
    _("Tilt Correction\n倾斜处理")
    _("Character Segmentation\n字符切割")
    _("Word Show")
    _("Character Recognition\n文字识别")
    _("Proofread\n校对")
    _("Help")
    _("Documentation\n文档")
    _("About\n关于")
    _("PyOCR")
    _("OCR")
    _("Find Side By Outside Borders")
    _("Find Side 1")
    _("Find Side 2")
    _("Normalize")
    _("Resize")
    _("Thinning")
    _("Match")
    _("Match By outside And distances")
    _("PyOCR")
    _("PyOCR Feature Extraction")

